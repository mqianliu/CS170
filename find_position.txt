# Put your solution here.
import networkx as nx
import random


def solve(client):
    client.end()
    client.start()
    all_students = list(range(1, client.students + 1))
    non_home = list(range(1, client.home)) + list(range(client.home + 1, client.v + 1))
    count = 0
    vote = [[0, i] for i in range(0, 101)]
    num_bots = [0 for _ in range(0, 101)]
    bots_position = []
    for v in non_home:
        scout_dict = client.scout(v, all_students)
        for key in scout_dict:
            if scout_dict[key] is True:
                vote[v][0] += 1

    vote.sort(key=lambda x: x[0], reverse=True)
    # print(vote)
    # print(scout_dict)
    for node in vote:
        min_weight = 999999
        tempu = 0
        tempv = 0
        for i in range(1, client.v+1):
            if node[1] != i and client.G[node[1]][i]['weight'] < min_weight:
                tempu, tempv = node[1], i
                min_weight = client.G[node[1]][i]['weight']
        num_check = client.remote(tempu, tempv)
        num_bots[tempv] += num_check
        num_bots[tempu] -= num_check
        count += num_check
        if count == client.bots:
            break
    for i in range(0, len(num_bots)):
        if num_bots[i] > 0:
            bots_position.append([i, num_bots[i]])
    print(bots_position)
    client.end()

